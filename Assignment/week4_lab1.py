# -*- coding: utf-8 -*-
"""week4_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9Emwejr2ivweiguxNgdR0m6SGYxG4_n
"""

!wget https://storage.googleapis.com/tensorflow-1-public/course2/week3/horse-or-human.zip

import zipfile

local = './horse-or-human.zip'
zip_= zipfile.ZipFile(local,'r')
zip_.extractall('./horse-or-human')
zip_.close()

import os

train_horse = os.path.join('./horse-or-human/horses')

train_human = os.path.join('./horse-or-human/humans')

len(train_horse)

train_horse_name = os.listdir(train_horse)
print(train_horse_name[:10])

train_human_name = os.listdir(train_human)
print(train_human_name[:10])

print("Total Images in Training Human :",len(train_human_name))
print("Total Images in Training Human :",len(os.listdir(train_human)))

print("Total Images in Training Horse :",len(train_horse_name))

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

nrows = 4
ncols = 4

pic_index=0

fig =plt.gcf()
fig.set_size_inches(ncols*4,nrows*4)

pic_index+=8

next_horse_pix = [os.path.join(train_horse,fname) for fname in train_horse_name[pic_index-8:pic_index]]
next_human_pix =[os.path.join(train_human,fname) for fname in train_human_name[pic_index-8:pic_index]]

for i,img_path in enumerate(next_horse_pix+next_human_pix):
  sp=plt.subplot(nrows,ncols,i+1)
  sp.axis('Off')

  img=mpimg.imread(img_path)

  plt.imshow(img)

plt.show()

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(300,300,3)),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(32,(3,3),activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3),activation="relu"),
    tf.keras.layers.MaxPool2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3),activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3),activation="relu"),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512,activation="relu"),

    tf.keras.layers.Dense(1,activation="sigmoid")
])

model.summary()

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(learning_rate=0.001),
              metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1/255)

train_generator = train_datagen.flow_from_directory(
    './horse-or-human/',
    target_size=(300,300),
    batch_size=128,
    class_mode='binary'
)

history=model.fit(
    train_generator,
    steps_per_epoch=8,
    epochs=15,
    verbose=1
)

import numpy as np
from google.colab import files
from tensorflow.keras.utils import load_img,img_to_array

uploaded=files.upload()

for fn in uploaded.keys():
  path='/content/'+fn
  img=load_img(path,target_size=(300,300))
  x = img_to_array(img)
  x/=255
  x=np.expand_dims(x,axis=0)

  images=np.vstack([x])

  classes = model.predict(images,batch_size=10)

  print(classes[0])

  if classes[0]>0.5:
    print(fn+" is a human")
  else:
    print(fn+" is a horse")

